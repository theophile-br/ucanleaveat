# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Unit Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
    - run: npm ci
    - run: npm test

name: Update Chrome Extension

on:
  push:
    tags:
      - v*.*.*
      
jobs:
  build-chrome-extension:
    name: Build Chrome extension artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build
        run: |-
          # fill in your build steps here...
          # we archive the dist folder and include SHA commit as the last step
          zip -r chrome-extension-${{ github.event.pull_request.head.sha }}.zip dist

      - name: Archive chrome-extension artifact
        uses: actions/upload-artifact@v2
        with:
          name: chrome-extension-${{ github.sha }}
          path: chrome-extension-${{ github.event.pull_request.head.sha }}.zip

 # api usage reference:
  # * <https://developer.chrome.com/docs/webstore/using_webstore_api/>
  # * <https://github.com/fregante/chrome-webstore-upload/blob/main/How%20to%20generate%20Google%20API%20keys.md>
  upload-extension:
    name: Upload extension
    runs-on: ubuntu-latest
    needs: build-chrome-extension
    env:
      # you can optionally specify extension ID here, we do this so that
      # all of our environments (dev, staging, prod) have a consistent ID
      # we can reference. Otherwise the extension ID is autogenerated.
      EXTENSION_ID: <extension id her> 

    steps:
      - uses: actions/setup-node@v2-beta
        with:
          node-version: "16.10"

      - name: Download bundle artifact
        uses: actions/download-artifact@v3
        with:
          name: chrome-extension-${{ github.sha }}

      - name: Install webstore cli
        run: |-
          npm install -g chrome-webstore-upload-cli

      - name: Upload step
        run: |-
          chrome-webstore-upload upload \\
            --source chrome-extension-${{ github.event.pull_request.head.sha }}.zip \\
            --extension-id ${{ env.EXTENSION_ID }} \\
            --client-id ${{ secrets.CI_GOOGLE_CLIENT_ID }} \\
            --client-secret ${{ secrets.CI_GOOGLE_CLIENT_SECRET }} \\
            --refresh-token ${{ secrets.CI_GOOGLE_REFRESH_TOKEN }}